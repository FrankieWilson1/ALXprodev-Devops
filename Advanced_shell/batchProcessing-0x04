#!/bin/bash
# Script to fetch data for a list of Pokemon in parallel.

# Array of pokemon names.
pokemon_list=(bulbasaur ivysaur venusaur charmander charmeleon)

# Define the base URL for the API and the output directory.
API_URL="https://pokeapi.co/api/v2/pokemon/"
OUTPUT_DIR="pokemon_data"

declare -a pids

# Define a cleanup function to kill background jobs if the script is interrupted.
cleanup() {
    echo -e "\nScript interrupted! Terminating background jobs..."
    # Loop through the stored PIDs and kill each one.
    for pid in "${pids[@]}"; do
        kill "$pid" 2>/dev/null
    done
    exit 1
}

# Set up a trap to call the cleanup function if the script receives an interrupt signal (SIGINT).
trap cleanup SIGINT

for pokemon in "${pokemon_list[@]}"; do
    pokemon_lower=$(echo "$pokemon" | tr '[:upper:]' '[:lower:]')
    
    # Launch curl as a background job and store its PID.
    curl -sS "${API_URL}${pokemon_lower}" -o "${OUTPUT_DIR}/${pokemon_lower}.json" &
    pids+=($!) # The special variable $! holds the PID of the last background process.
    echo "Launched job for $pokemon with PID: $! ✅"
done

# Wait for each background process to complete individually.
echo "Waiting for all jobs to finish..."
for pid in "${pids[@]}"; do
    wait "$pid"
done

echo "All Pokémon data has been fetched and saved. ✅"
echo "Script finished."
